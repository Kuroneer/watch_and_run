#! /usr/bin/env bash

#   Script to watch the filesystem and run a command when some file changes.
#   Provides options to heed .gitignore, filepath regex validation...
#
#   Author: Jose Maria Perez Ramos <jose.m.perez.ramos+git gmail>
#   Date: 2021.05.09
#   Version: 1.0.1
#   This code is public-domain


CLEAR_SCREEN=
THROTTLE_S=5
WITH_SHELL=1
HEED_GIT=1
QUIET=
REGEXs=()
IGNORE_REGEXs=()
WRITE_ARGS=
AT_LEAST_ONCE=1
MARK=
VERBOSE=
KILL_SIGNAL=TERM
CLEAN_UP_COMMAND=
USE_PROCESS_GROUPS=

while getopts ":ck:Gi:Om:pqr:St:u:vw" OPT; do
    case "${OPT}" in
        c)
            CLEAR_SCREEN=1
            ;;
        k)
            KILL_SIGNAL=${OPTARG}
            ;;
        G)
            HEED_GIT=
            ;;
        i)
            IGNORE_REGEXs+=( ${OPTARG} )
            ;;
        m)
            MARK=${OPTARG}
            ;;
        O)
            AT_LEAST_ONCE=
            ;;
        p)
            USE_PROCESS_GROUPS=1
            ;;
        q)
            QUIET=" --quiet "
            ;;
        r)
            REGEXs+=( ${OPTARG} )
            ;;
        S)
            WITH_SHELL=
            ;;
        t)
            if [[ ${OPTARG} =~ ^[0-9]+$ ]] ; then
                THROTTLE_S=${OPTARG}
            else
                echo "WARNING: ${OPT}: ${OPTARG} Not a number" >&2
            fi
            ;;
        u)
            CLEAN_UP_COMMAND=${OPTARG}
            ;;

        v)
            VERBOSE=1
            ;;
        w)
            WRITE_ARGS="$(for ARG in "$@"; do
                if [[ "$ARG" != "-w" ]]; then
                    printf ' "%s"' "$(sed -e 's/"/\\"/g' <<< $ARG)"
                fi
            done)"
            ;;
        *)
            cat << USAGE >&2
Usage: $(basename $0) [-S] [-c] [-K] [-G] [-O] [-q] [-t <throttle_time>] [-r <regex>] [-m <mark>] [-h] [--] [<dir>] <command>
    Sets up inotify to watch for events in <dir> (or .) on files that match <regex> (or all files) and runs <command> every time such a file changes. The command is run at least once by default.
    -S: Do not use shell
    -c: Clear the screen
    -k <signal>: Signal to send when killing the spawned command (default is TERM, set to "" to disable)
    -G: Do not heed git ('heed git' means using .gitignore and ignoring */.git/*)
    -i <regex>: Ignore changes to files matching these regex (applied last, you can provide several)
    -O: Do not run the command at first, wait only for events
    -p: Start (and kill) whole process groups
    -q: Quiet
    -t <time>: Time to throttle command kill and restart
    -r <regex>: Listen for events that match this regex (you can provide several)
    -m <mark>: Print mark before each command execution
    -u <command>: Clean-up command
    -v: Show the path that triggered the command
    -w: Write config file to be able to run the whole command just with $(basename $0)
    -h: Show this help
USAGE
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

DIR=.
if [[ -d "${1}" ]]; then
    DIR="${1}"
    shift
fi

COMMAND="$1"
shift

CONF_FILE_NAME=".$(basename $0).conf"
if [[ -z "$COMMAND" ]]; then
    if [[ -f "$CONF_FILE_NAME" ]]; then
        eval "exec $0 $(cat "$CONF_FILE_NAME")"
    fi

    echo "ERROR: Command not found" >&2
    exit 2;
fi
if [[ -n "$WRITE_ARGS" ]]; then
    echo "$WRITE_ARGS" > "$CONF_FILE_NAME"
    echo "$CONF_FILE_NAME written" >&2
fi

if [[ -n "$WITH_SHELL" ]]; then
    ARGS=
    # Ugly as hell, I know, but I need to escape it manually
    for ARG in "$@"; do
        ARGS=$(printf '%s "%s"' "$ARGS" "$(sed -e 's/"/\\"/g' <<< $ARG)")
    done
fi

## Report what's going to be done
if [[ -z "$QUIET" ]]; then
    if [[ -n "$WITH_SHELL" ]]; then
        echo "Running <$COMMAND> with $SHELL every time a file on <$DIR> changes" >&2
    else
        echo "Running <$COMMAND> every time a file on <$DIR> changes" >&2
    fi
    if [[ ${#REGEXs[@]} -ne 0 ]]; then
        echo "File path must match any of <${REGEXs[@]}>" >&2
    fi
    echo "At most run once each ${THROTTLE_S}s" >&2
    if [[ -n "$KILL_SIGNAL" ]]; then
        echo "Running program will be sent the $KILL_SIGNAL signal if it's still running when command is triggered" >&2
    fi
    if [[ -n "$CLEAR_SCREEN" ]]; then
        echo "Screen will be cleared each time" >&2
    fi
    echo "Setting inotify..."
fi

START_PROCESS_GROUP=
if [[ -n "$USE_PROCESS_GROUPS" ]]; then
    START_PROCESS_GROUP=setsid
fi
KILL_PROCESS_GROUP=
if [[ -n "$USE_PROCESS_GROUPS" ]]; then
    KILL_PROCESS_GROUP=-
fi


##############################################
# Configuration complete, now the fun part...
PID=

tidy () {
    trap - SIGINT SIGTERM
    if [[ -n "$KILL_SIGNAL" ]]; then
        kill -$KILL_SIGNAL -- ${KILL_PROCESS_GROUP}$PID 2>/dev/null
    fi
    if [[ -n "$CLEAN_UP_COMMAND" ]]; then
        $CLEAN_UP_COMMAND
    fi
    stty sane 2>/dev/null
    exit
}
trap tidy SIGINT SIGTERM

# Set up FD with inotifywait events
INOTIFY_EVENTS='--event modify --event move --event create --event delete'
exec 3< <( [[ -n "$AT_LEAST_ONCE" ]] && echo ""; inotifywait --monitor --recursive $QUIET $INOTIFY_EVENTS --format "%w%f" $DIR )

while read -u 3 EVENT_PATH; do
    if [[ -n "$EVENT_PATH" ]]; then
        if [[ ${#REGEXs[@]} -ne 0 ]]; then
            # Check regex if present
            MATCH=
            for REGEX in "${REGEXs[@]}"; do
                if [[ "$EVENT_PATH" =~ $REGEX ]]; then
                    MATCH=1
                    break
                fi
            done
            if [[ -z "$MATCH" ]]; then
                continue;
            fi
        fi

        if [[ -n "$HEED_GIT" ]] && command -v git > /dev/null; then
            # Check git if not disabled
            if [[ "$EVENT_PATH" =~ ^(.*/)?.git(/.*)?$ ]]; then
                continue;
            fi
            if git check-ignore -q "$EVENT_PATH" 2>/dev/null; then
                continue;
            fi
        fi

        if [[ ${#IGNORE_REGEXs[@]} -ne 0 ]]; then
            MATCH=
            for REGEX in "${IGNORE_REGEXs[@]}"; do
                if [[ "$EVENT_PATH" =~ $REGEX ]]; then
                    MATCH=1
                    break
                fi
            done
            if [[ -n "$MATCH" ]]; then
                continue;
            fi
        fi
    fi

    # If command is started and we are allowed to kill it, do it
    if [[ -n "$PID" ]]; then
        if [[ -n "$KILL_SIGNAL" ]]; then
            kill -$KILL_SIGNAL -- ${KILL_PROCESS_GROUP}$PID 2>/dev/null
        fi

        if [[ -n "$CLEAN_UP_COMMAND" ]]; then
            $CLEAN_UP_COMMAND
        fi
        wait $PID
        stty sane 2>/dev/null
    fi

    # "Clear" stdin
    while read -r -t 0 -u 3; do
        if ! read -r -u 3; then
            # Read -t 0 may report that the fd is able to read
            break
        fi
    done

    if [[ -n "$CLEAR_SCREEN" ]]; then
        clear
    fi
    if [[ -n "$MARK" ]]; then
        echo "$MARK"
    fi

    [[ -n "$EVENT_PATH" && -n "$VERBOSE" ]] && echo "Triggered by $EVENT_PATH"

    date
    # Run the command
    if [[ -n "$WITH_SHELL" ]]; then
        $START_PROCESS_GROUP $SHELL "-c" "$COMMAND $ARGS" <&0 &
    else
        $START_PROCESS_GROUP $COMMAND "$@" <&0 &
    fi
    PID=$!

    # Throttle
    sleep $THROTTLE_S
done

